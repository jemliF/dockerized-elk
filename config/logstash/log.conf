input {
	file {
		path => "/opt/logs/access_log"
		start_position => "end"
		sincedb_path => "/dev/null"
		ignore_older => 0
		type => "logs"
		stat_interval => 5
	}
}

filter {
	if[type] == "logs" {
		mutate {
			gsub => ["message", "::ffff:", "",
			 "message", "@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\]) \[", " ["]
		}
		grok {
			match=> [
			   "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}",
			   "message" , "%{COMMONAPACHELOG}+%{GREEDYDATA:extra_fields}"
			   ]
			   overwrite=> [ "message" ]
	  	}

	   mutate {
		   convert=> ["response", "integer"]
		   convert=> ["bytes", "integer"]
		   convert=> ["responsetime", "float"]
	   }
	   geoip {
	      source => "clientip"
	      target => "geoip"
	      database => "/opt/logs/GeoLite2-City.mmdb"
	      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
	      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    	}
	    mutate {
	      convert => [ "[geoip][coordinates]", "float"]
	    }

	   date {
		   match=> [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z" ]
		   remove_field=> [ "timestamp" ]
	   }
	   useragent {
	   	   source=> "agent"
	   }
	}
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
	}
}